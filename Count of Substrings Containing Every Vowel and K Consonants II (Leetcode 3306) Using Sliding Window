class Solution {
    public boolean isVowel(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }
    public long countOfSubstrings(String word, int k) {
        int n = word.length();
        Map<Character , Integer> map = new HashMap<>();
        int lastConst[] = new int[n];
        int index = n;

        for(int i = n - 1; i >= 0; i--) {
            lastConst[i] = index;
            if(!isVowel(word.charAt(i))) {
                index = i;
            }
        }

        int i     = 0;
        int j     = 0;
        int cons = 0;
        long count = 0;

        while(j < n) {
           char ch = word.charAt(j);
           if(isVowel(ch)) {
              map.put(ch , map.getOrDefault(ch , 0) + 1);
           } 
           else {
             cons++;
           }

           while (i < n && cons > k) {
             char c = word.charAt(i);
             if(isVowel(c)) {
                map.put(c , map.get(c) - 1);
                if(map.get(c) == 0)
                   map.remove(c);
             }
             else {
                cons--;
             }
             i++;
           }

           while (i < n && map.size() == 5 && cons == k) {
               int idx = lastConst[j];
               count += idx - j;

               char c = word.charAt(i);
               if(isVowel(c)) {
                  map.put(c , map.get(c) - 1);
                  if(map.get(c) == 0)
                     map.remove(c);
               }
               else {
                  cons--;
               }
               i++;
           }
           j++;
        }
        return count;
    }
}
