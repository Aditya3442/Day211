class Solution {
    public boolean dfs(int index , int parent , int color , int[] visited , int[][] graph) {
        visited[index] = color;
        boolean check = true;
        for(int arr : graph[index]) {
           if(arr == parent)
             continue;
           if((visited[arr] == 0 && color == 0) || (visited[arr] == 1 && color == 1))
             return false;
           if(visited[arr] == -1 && color == 0) {
              check = check && dfs(arr , index , 1 , visited , graph);
           }
           else if(visited[arr] == -1 && color == 1) {
              check = check && dfs(arr , index , 0 , visited , graph);
           }
        }
        return check;
    }
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int visited[] = new int[n];
        Arrays.fill(visited , -1);

        for(int i = 0; i < n; i++) {
            if(visited[i] == -1) {
                if(!dfs(i , -1 , 0 , visited , graph))
                   return false;
            }
        }
        return true;
    }
}
